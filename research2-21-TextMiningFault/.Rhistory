labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm, aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.5) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
bar_3modelvs <- ggplot(data = data_result_handle_svm, aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.8) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 20, width = 16)
bar_3modelvs <- ggplot(data = data_result_handle_svm %>% filter(type == "模型1"|type == "模型2"),
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm %>% filter(type == "模型1"|type == "模型2"),
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_y_continuous(limits = c(0.6, 1)) +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
bar_3modelvs <- ggplot(data = data_result_handle_svm %>% filter(type == "模型1"|type == "模型2"),
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_y_continuous(limits = c(0.6, 1),
breaks = c(0.6, 0.7, 0.8, 0.9, 1),
labels = c(0.6, 0.7, 0.8, 0.9, 1)) +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
data_result_handle_svm %>% filter(type == "模型1"|type == "模型2")
bar_3modelvs <- ggplot(data = data_result_handle_svm %>% filter(type == "模型1"|type == "模型2"),
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
# scale_y_continuous(limits = c(0.6, 1),
#                    breaks = c(0.6, 0.7, 0.8, 0.9, 1),
#                    labels = c(0.6, 0.7, 0.8, 0.9, 1)) +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
View(bar_3modelvs)
View(data_result_handle_svm)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm %>% filter(type == "模型1"|type == "模型2"),
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_y_continuous(limits = c(0.6, 1),
breaks = c(0.6, 0.7, 0.8, 0.9, 1),
labels = c(0.6, 0.7, 0.8, 0.9, 1)) +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_shape_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型：", values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
data_goal <- data_result_handle_svm %>% filter(type == "goal")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 4) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result), size = 1.3) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 30),
axis.text.x = element_text(family = "RMN", size = 30),
axis.title.y = element_text(family = "RMN", size = 30),
axis.text.y = element_text(family = "RMN", size = 30),
strip.text = element_text(family = "RMN", size = 30),
legend.title = element_text(family = "RMN", size = 30),
legend.text = element_text(family = "RMN", size = 30),
legend.position = "bottom")
line_goal
ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
data_goal <- data_result_handle_svm %>% filter(type == "模型1")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 4) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result), size = 1.3) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 30),
axis.text.x = element_text(family = "RMN", size = 30),
axis.title.y = element_text(family = "RMN", size = 30),
axis.text.y = element_text(family = "RMN", size = 30),
strip.text = element_text(family = "RMN", size = 30),
legend.title = element_text(family = "RMN", size = 30),
legend.text = element_text(family = "RMN", size = 30),
legend.position = "bottom")
line_goal
ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 4) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result), size = 1.3) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 30),
axis.text.x = element_text(family = "RMN", size = 30),
axis.title.y = element_text(family = "RMN", size = 30),
axis.text.y = element_text(family = "RMN", size = 30),
strip.text = element_text(family = "RMN", size = 30),
legend.title = element_text(family = "RMN", size = 30),
legend.text = element_text(family = "RMN", size = 30),
legend.position = "bottom")
line_goal
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(dplyr)
library(ggplot2)
windowsFonts(RMN = windowsFont("Times New Roman"))
data_result_handle_svm <- read.csv("result_test2_handle_svm.csv")
data_result_handle_svm <- as_tibble(data_result_handle_svm)
data_result_handle_svm$index <- factor(data_result_handle_svm$index, levels = c("Accuracy", "Precision", "Recall", "F1-Score"), ordered = TRUE)
data_result_handle_svm$type <- factor(data_result_handle_svm$type,
levels = c("control1", "control2", "goal"),
labels = c("模型1", "模型2", "模型3"), ordered = TRUE)
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 4) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result), size = 1.3) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result), size = 1.3) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 30),
axis.text.x = element_text(family = "RMN", size = 30),
axis.title.y = element_text(family = "RMN", size = 30),
axis.text.y = element_text(family = "RMN", size = 30),
strip.text = element_text(family = "RMN", size = 30),
legend.title = element_text(family = "RMN", size = 30),
legend.text = element_text(family = "RMN", size = 30),
legend.position = "bottom")
line_goal
ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
for(k in seq(100, 1000, 100)){
# 载入建模数据
name <- "ph"
word2vec_vector_size <- k
word2vec_window <- 10
data_setmodel <- read.csv(paste("cut_word2vec_", name, "_", word2vec_vector_size, "_", word2vec_window, ".csv", sep = ""))
data_table_system <- read.csv("table_system.csv")
data_table_handle <- read.csv("table_handle.csv")
data_setmodel$y1 <- factor(data_table_system$sysnum)
data_setmodel$y2 <- factor(data_table_handle$handle)
data_setmodel2 <- read.csv(paste("cut_word2vec_", name, "_", "900", "_", word2vec_window, ".csv", sep = ""))
data_setmodel2$y1 <- factor(data_table_system$sysnum)
data_setmodel2$y2 <- factor(data_table_handle$handle)
# 开始循环建模
index_result <- data.frame(accuracy = NA, precision = NA, recall = NA, f1 = NA)
for(cirulation in 1:100){
# 初始时间
t0 <- Sys.time()
# 生成训练集和测试集
set.seed(cirulation)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
data_train2 <- data_setmodel2[trainSample, ]
data_test2 <- data_setmodel2[-trainSample, ]
# 关键参数设置
gamma = 20
cost = 10
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建立故障定位模型
SVMsystem <- svm(y1~., data = subset(data_train, select = -c(y2)), type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 给训练集打上标签，用真实数据把系统打成标签，把处理方式当做变量，训练模型
# 打标签的function
def_Tag <- function(data, tag){
tag_unique <- sort(unique(tag))
tag_matrix <- matrix(0, nrow = nrow(data), ncol = length(tag_unique))
for(i in 1:nrow(tag_matrix)){
for(j in 1:length(tag_unique)){
if(tag[i]==tag_unique[j]){
tag_matrix[i, j] <- 1
}
}
}
tag_data <- data.frame(tag_matrix)
names(tag_data) <- c("T1", "T2", "T3", "T4")
result <- cbind(tag_data, data)
return(result)
}
# 打标签
data_train2 <- def_Tag(data_train2, data_train2$y1)
# 建立处理方式模型，此时的训练集包含打入的故障定位标签
SVMhandle <- svm(y2~., data = subset(data_train2, select = -c(y1)), type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 对测试集的故障部位进行预测
predsite <- predict(SVMsystem, subset(data_test, select = -c(y1, y2)), type = "class")
# 根据预测的故障部位给测试集打上标签
data_test2 <- def_Tag(data_test2, predsite)
# 对测试集的处理方式进行预测
pred <- predict(SVMhandle, subset(data_test2, select = -c(y1, y2)), type = "class")
# 计算分类效果指标
# 多分类指标计算
df_multiIndex <- function(true, pred){
label <- sort(unique(true))
data <- data.frame(true = true, pred = pred)
precision <- NA
recall <- NA
f1 <- NA
#  tp: True Positive,把正样本预测为正
#  fp: False Positive,把负样本预测为正
#  tn: True Negative,把负样本预测为负
#  fn: False Negative,把正样本预测为负
# accuracy = (tp+tn)/(tp+fp+tn+fn)
# precision = tp/(tp+fp) 在预测为正的所有数据中，真实的占多少
# recall = tp/(tp+fn) 在所有的正样本中，成功预测的有多少
# f1 = (2*precision*recall)/(precision+recall)
for(i in 1:length(label)){
tp <- nrow(data[which(data$true==label[i] & data$pred==label[i]), ])
fp <- nrow(data[which(data$true!=label[i] & data$pred==label[i]), ])
tn <- nrow(data[which(data$true!=label[i] & data$pred!=label[i]), ])
fn <- nrow(data[which(data$true==label[i] & data$pred!=label[i]), ])
precision[i] <- tp/(tp+fp)
recall[i] <- tp/(tp+fn)
f1[i] <- (2*(tp/(tp+fp))*(tp/(tp+fn)))/((tp/(tp+fp))+(tp/(tp+fn)))
}
accuracy <- nrow(data[which(data$true==data$pred), ])/nrow(data)
precision[is.na(precision)] <- 0
recall[is.na(recall)] <- 0
f1[is.na(f1)] <- 0
result <- data.frame(accuracy = accuracy, precision = mean(precision), recall = mean(recall), f1 = mean(f1))
return(result)
}
# 计算
index <- df_multiIndex(data_test2$y2, pred)
# 保存
index_result <- rbind(index_result, index)
# 循环结束时间
t1 <- Sys.time()
# 输出循环戳
print(paste(c("第", cirulation, "次循环,", "本次循环用时：", t1-t0), collapse=""))
print(index)
}
index_result[is.na(index_result)] <- 0
index_result <- index_result[-1, ]
apply(index_result, MARGIN = 2, mean)
# 输出最终结果
outputdata <- data.frame(num = apply(index_result, MARGIN = 2, mean),
index = c("Accuracy", "Precision", "Recall", "F1-Score"),
cut = rep("word2vec", 4),
vectorsize = rep(word2vec_vector_size, 4),
window = rep(word2vec_window, 4),
algorithm = rep("SVM", 4),
gammacost = rep(paste(c(gamma, cost), collapse = "_"), 4))
write.csv(outputdata, paste(c("result_test2_single_SVM_", gamma, "_", cost, "_word2vec_", word2vec_vector_size, "_", word2vec_window, ".csv"), collapse = ""), row.names = FALSE)
}
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(dplyr)
library(ggplot2)
windowsFonts(RMN = windowsFont("Times New Roman"))
data_result_handle_svm <- read.csv("result_test2_handle_svm.csv")
data_result_handle_svm <- as_tibble(data_result_handle_svm)
data_result_handle_svm$index <- factor(data_result_handle_svm$index, levels = c("Accuracy", "Precision", "Recall", "F1-Score"), ordered = TRUE)
data_result_handle_svm$type <- factor(data_result_handle_svm$type,
levels = c("control1", "control2", "goal"),
labels = c("模型1", "模型2", "模型3"), ordered = TRUE)
data_result_handle_svm$vectorsize <- factor(data_result_handle_svm$vectorsize,
levels = c(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000),
labels = c(paste("文本向量长度：", seq(100, 1000, 100), sep = "")),
ordered = TRUE)
names(data_result_handle_svm)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
# ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
# # 做svm和word2vec的图
# data_goal <- data_result_handle_svm %>% filter(type == "goal")
# data_goal_min <- min(data_goal$result)
# data_goal_max <- max(data_goal$result)
# data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
# line_goal <- ggplot()+
#   geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
#   geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result)) +
#   geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result)) +
#   geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result)) +
#   geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result)) +
#   scale_x_continuous(breaks = seq(100, 1000, 100)) +
#   scale_y_continuous(limits = c(data_goal_min, data_goal_max),
#                      breaks = data_goal_label,
#                      labels = data_goal_label) +
#   scale_shape_discrete(name = "模型评价指标：") +
#   labs(x = "文本向量长度", y = "指标值") +
#   theme(axis.title.x = element_text(family = "RMN", size = 25),
#         axis.text.x = element_text(family = "RMN", size = 25),
#         axis.title.y = element_text(family = "RMN", size = 25),
#         axis.text.y = element_text(family = "RMN", size = 25),
#         strip.text = element_text(family = "RMN", size = 25),
#         legend.title = element_text(family = "RMN", size = 25),
#         legend.text = element_text(family = "RMN", size = 25),
#         legend.position = "bottom")
# line_goal
# # ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
#
# # 做goal组和control组的对比图(向量长度200)
# data_goal_control <- data_result_handle_svm %>% filter(vectorsize == 200)
# bar_goal_control <- ggplot(data = data_goal_control, aes(x = index, y = result, fill = type)) +
#   geom_bar(stat = "identity", position = "dodge", width = 0.4) +
#   scale_fill_discrete(name = "模型:", breaks = c("goal", "control"), labels = c("融合定位信息", "未融合定位信息")) +
#   labs(y = "指标值", x = "模型评价指标") +
#   theme(axis.title.x = element_blank(),
#         axis.text.x = element_text(family = "RMN", size = 28),
#         axis.title.y = element_text(family = "RMN", size = 28),
#         axis.text.y = element_text(family = "RMN", size = 28),
#         strip.text = element_text(family = "RMN", size = 28),
#         legend.title = element_text(family = "RMN", size = 28),
#         legend.text = element_text(family = "RMN", size = 28),
#         legend.position = "bottom")
# bar_goal_control
# # ggsave(bar_goal_control, filename = "C:/Users/ylc/Desktop/故障处理方式对比.tiff", dpi = 600, height = 10, width = 16)
