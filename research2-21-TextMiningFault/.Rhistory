labels = c(paste("文本向量长度：", seq(100, 1000, 100), sep = "")),
ordered = TRUE)
names(data_result_handle_svm)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_discrete(name = "模型：") +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
# ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
# # 做svm和word2vec的图
# data_goal <- data_result_handle_svm %>% filter(type == "goal")
# data_goal_min <- min(data_goal$result)
# data_goal_max <- max(data_goal$result)
# data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
# line_goal <- ggplot()+
#   geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
#   geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result)) +
#   geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result)) +
#   geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result)) +
#   geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result)) +
#   scale_x_continuous(breaks = seq(100, 1000, 100)) +
#   scale_y_continuous(limits = c(data_goal_min, data_goal_max),
#                      breaks = data_goal_label,
#                      labels = data_goal_label) +
#   scale_shape_discrete(name = "模型评价指标：") +
#   labs(x = "文本向量长度", y = "指标值") +
#   theme(axis.title.x = element_text(family = "RMN", size = 25),
#         axis.text.x = element_text(family = "RMN", size = 25),
#         axis.title.y = element_text(family = "RMN", size = 25),
#         axis.text.y = element_text(family = "RMN", size = 25),
#         strip.text = element_text(family = "RMN", size = 25),
#         legend.title = element_text(family = "RMN", size = 25),
#         legend.text = element_text(family = "RMN", size = 25),
#         legend.position = "bottom")
# line_goal
# # ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
#
# # 做goal组和control组的对比图(向量长度200)
# data_goal_control <- data_result_handle_svm %>% filter(vectorsize == 200)
# bar_goal_control <- ggplot(data = data_goal_control, aes(x = index, y = result, fill = type)) +
#   geom_bar(stat = "identity", position = "dodge", width = 0.4) +
#   scale_fill_discrete(name = "模型:", breaks = c("goal", "control"), labels = c("融合定位信息", "未融合定位信息")) +
#   labs(y = "指标值", x = "模型评价指标") +
#   theme(axis.title.x = element_blank(),
#         axis.text.x = element_text(family = "RMN", size = 28),
#         axis.title.y = element_text(family = "RMN", size = 28),
#         axis.text.y = element_text(family = "RMN", size = 28),
#         strip.text = element_text(family = "RMN", size = 28),
#         legend.title = element_text(family = "RMN", size = 28),
#         legend.text = element_text(family = "RMN", size = 28),
#         legend.position = "bottom")
# bar_goal_control
# # ggsave(bar_goal_control, filename = "C:/Users/ylc/Desktop/故障处理方式对比.tiff", dpi = 600, height = 10, width = 16)
library(ggplot2)
library(dplyr)
windowsFonts(RMN = windowsFont("Times New Roman"))
mycolors <- c("#F8766D", "#00BA38", "#619CFF")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH10FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH15FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH20FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH25FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH30FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH35FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH40FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH45FNIPCA.RData")
#
# functionResultByTime <- function(List, t=1){
#
#   library(dplyr)
#
#   dataResults <- List[[1]]
#   for(i in 2:length(List)){
#     dataResults <- rbind(dataResults, List[[i]])
#   }
#   dataResults$ResultEnsemble <- round(dataResults$ResultEnsemble)
#   dataResults$ResultEnsemble[which(dataResults$ResultEnsemble < 0)] <- 0
#   dataResults$ResultEnsemble[which(dataResults$ResultEnsemble > 1)] <- 1
#
#   dataResults$Time <- as.numeric(dataResults$Time)
#   dataResults <- dataResults[order(dataResults$Time), ]
#   names(dataResults) <- c("pre", "true", "time")
#
#   n <- ceiling(max(dataResults$time)/(t*1000))
#   acc <- c()
#   pre <- c()
#   rec <- c()
#   time <- c()
#   for(i in 1:n){
#
#     raw <- which((dataResults$time > (i-1)*t*1000) & (dataResults$time <= i*t*1000))
#     data <- dataResults[raw, ]
#     data.table <- data.frame(table(data$pre, data$true))
#     data.table <- tbl_df(data.table)
#     names(data.table) <- c("pre", "true", "n")
#
#     tp <- as.numeric(data.table%>%filter((pre==1)&(true==1))%>%select(n))
#     tn <- as.numeric(data.table%>%filter((pre==1)&(true==0))%>%select(n))
#     fp <- as.numeric(data.table%>%filter((pre==0)&(true==1))%>%select(n))
#     fn <- as.numeric(data.table%>%filter((pre==0)&(true==0))%>%select(n))
#
#     if(is.na(tp)){tp<-0}
#     if(is.na(tn)){tn<-0}
#     if(is.na(fp)){fp<-0}
#     if(is.na(tn)){tn<-0}
#
#
#     acc[i] <- (tp+fn)/sum(data.table$n)
#     pre[i] <- tp/(tp+tn)
#     rec[i] <- tp/(tp+fp)
#     time[i] <- (i-1)*t
#
#   }
#   result <- data.frame(acc = acc, pre = pre, rec = rec, time = time)
#   return(result)
# }
#
# functionTimeData <- function(data){
#
#   dataR <- data.frame(value = c(data$acc, data$pre, data$rec),
#                       time = c(data$time, data$time, data$time),
#                       Index = rep(c("Accuracy", "Precision", "Recall"), each = nrow(data)))
#
#   return(dataR)
#
# }
#
# dataResultsH10 <- functionResultByTime(listH10FNResult, t=1)
# dataH10 <- functionTimeData(dataResultsH10)
# dataResultsH15 <- functionResultByTime(listH15FNResult, t=1)
# dataH15 <- functionTimeData(dataResultsH15)
# dataResultsH20 <- functionResultByTime(listH20FNResult, t=1)
# dataH20 <- functionTimeData(dataResultsH20)
# dataResultsH25 <- functionResultByTime(listH25FNResult, t=1)
# dataH25 <- functionTimeData(dataResultsH25)
# dataResultsH30 <- functionResultByTime(listH30FNResult, t=1)
# dataH30 <- functionTimeData(dataResultsH30)
# dataResultsH35 <- functionResultByTime(listH35FNResult, t=1)
# dataH35 <- functionTimeData(dataResultsH35)
# dataResultsH40 <- functionResultByTime(listH40FNResult, t=1)
# dataH40 <- functionTimeData(dataResultsH40)
# dataResultsH45 <- functionResultByTime(listH45FNResult, t=1)
# dataH45 <- functionTimeData(dataResultsH45)
# data.Index.byTime <- rbind(dataH10, dataH15, dataH20, dataH25, dataH30, dataH35, dataH40, dataH45)
data.Index.byTime <- read.csv("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/resultBytimeCIPCAFN")
data.Index.byTime$Neurons <- rep(c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
each = 30*3)
data.Index.byTime$Neurons <- factor(data.Index.byTime$Neurons,
levels = c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
ordered = TRUE)
data.Index.byTime$Index <- factor(data.Index.byTime$Index, levels = c("Accuracy", "Precision", "Recall"), ordered = TRUE)
data.Index.byTime$time <- factor(data.Index.byTime$time, levels = c(29:0), ordered = TRUE)
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
facet_wrap(.~Neurons, nrow = 4) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
data.Index.byTime <- read.csv("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/resultBytimeCIPCAFN.csv")
data.Index.byTime$Neurons <- rep(c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
each = 30*3)
data.Index.byTime$Neurons <- factor(data.Index.byTime$Neurons,
levels = c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
ordered = TRUE)
data.Index.byTime$Index <- factor(data.Index.byTime$Index, levels = c("Accuracy", "Precision", "Recall"), ordered = TRUE)
data.Index.byTime$time <- factor(data.Index.byTime$time, levels = c(29:0), ordered = TRUE)
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
facet_wrap(.~Neurons, nrow = 4) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
data.Index.byTime <- data.Index.byTime[which(data.Index.byTime$Neurons == "隐神经元数量:30"), ]
View(data.Index.byTime)
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
ggsave(gpline.IndexByTime, filename = "C:/Users/ylc/Desktop/分时段故障预测指标.tiff", dpi = 600, width = 12, height = 15)
ggsave(gpline.IndexByTime, filename = "C:/Users/ylc/Desktop/分时段故障预测指标.tiff", dpi = 600, width = 8, height = 8)
library(ggplot2)
library(dplyr)
windowsFonts(RMN = windowsFont("Times New Roman"))
mycolors <- c("#F8766D", "#00BA38", "#619CFF")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH10FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH15FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH20FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH25FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH30FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH35FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH40FNIPCA.RData")
# load("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH45FNIPCA.RData")
#
# functionResultByTime <- function(List, t=1){
#
#   library(dplyr)
#
#   dataResults <- List[[1]]
#   for(i in 2:length(List)){
#     dataResults <- rbind(dataResults, List[[i]])
#   }
#   dataResults$ResultEnsemble <- round(dataResults$ResultEnsemble)
#   dataResults$ResultEnsemble[which(dataResults$ResultEnsemble < 0)] <- 0
#   dataResults$ResultEnsemble[which(dataResults$ResultEnsemble > 1)] <- 1
#
#   dataResults$Time <- as.numeric(dataResults$Time)
#   dataResults <- dataResults[order(dataResults$Time), ]
#   names(dataResults) <- c("pre", "true", "time")
#
#   n <- ceiling(max(dataResults$time)/(t*1000))
#   acc <- c()
#   pre <- c()
#   rec <- c()
#   time <- c()
#   for(i in 1:n){
#
#     raw <- which((dataResults$time > (i-1)*t*1000) & (dataResults$time <= i*t*1000))
#     data <- dataResults[raw, ]
#     data.table <- data.frame(table(data$pre, data$true))
#     data.table <- tbl_df(data.table)
#     names(data.table) <- c("pre", "true", "n")
#
#     tp <- as.numeric(data.table%>%filter((pre==1)&(true==1))%>%select(n))
#     tn <- as.numeric(data.table%>%filter((pre==1)&(true==0))%>%select(n))
#     fp <- as.numeric(data.table%>%filter((pre==0)&(true==1))%>%select(n))
#     fn <- as.numeric(data.table%>%filter((pre==0)&(true==0))%>%select(n))
#
#     if(is.na(tp)){tp<-0}
#     if(is.na(tn)){tn<-0}
#     if(is.na(fp)){fp<-0}
#     if(is.na(tn)){tn<-0}
#
#
#     acc[i] <- (tp+fn)/sum(data.table$n)
#     pre[i] <- tp/(tp+tn)
#     rec[i] <- tp/(tp+fp)
#     time[i] <- (i-1)*t
#
#   }
#   result <- data.frame(acc = acc, pre = pre, rec = rec, time = time)
#   return(result)
# }
#
# functionTimeData <- function(data){
#
#   dataR <- data.frame(value = c(data$acc, data$pre, data$rec),
#                       time = c(data$time, data$time, data$time),
#                       Index = rep(c("Accuracy", "Precision", "Recall"), each = nrow(data)))
#
#   return(dataR)
#
# }
#
# dataResultsH10 <- functionResultByTime(listH10FNResult, t=1)
# dataH10 <- functionTimeData(dataResultsH10)
# dataResultsH15 <- functionResultByTime(listH15FNResult, t=1)
# dataH15 <- functionTimeData(dataResultsH15)
# dataResultsH20 <- functionResultByTime(listH20FNResult, t=1)
# dataH20 <- functionTimeData(dataResultsH20)
# dataResultsH25 <- functionResultByTime(listH25FNResult, t=1)
# dataH25 <- functionTimeData(dataResultsH25)
# dataResultsH30 <- functionResultByTime(listH30FNResult, t=1)
# dataH30 <- functionTimeData(dataResultsH30)
# dataResultsH35 <- functionResultByTime(listH35FNResult, t=1)
# dataH35 <- functionTimeData(dataResultsH35)
# dataResultsH40 <- functionResultByTime(listH40FNResult, t=1)
# dataH40 <- functionTimeData(dataResultsH40)
# dataResultsH45 <- functionResultByTime(listH45FNResult, t=1)
# dataH45 <- functionTimeData(dataResultsH45)
# data.Index.byTime <- rbind(dataH10, dataH15, dataH20, dataH25, dataH30, dataH35, dataH40, dataH45)
data.Index.byTime <- read.csv("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/resultBytimeCIPCAFN.csv")
data.Index.byTime$Neurons <- rep(c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
each = 30*3)
data.Index.byTime$Neurons <- factor(data.Index.byTime$Neurons,
levels = c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
ordered = TRUE)
data.Index.byTime$Index <- factor(data.Index.byTime$Index, levels = c("Accuracy", "Precision", "Recall"), ordered = TRUE)
data.Index.byTime$time <- factor(data.Index.byTime$time, levels = c(29:0), ordered = TRUE)
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
facet_wrap(.~Neurons, nrow = 4) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
data.Index.byTime <- data.Index.byTime[which(data.Index.byTime$Neurons == "隐神经元数量:30"), ]
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
ggsave(gpline.IndexByTime, filename = "C:/Users/ylc/Desktop/分时段故障预测指标.tiff", dpi = 600, width = 8, height = 7)
ggsave(gpline.IndexByTime, filename = "C:/Users/ylc/Desktop/分时段故障预测指标.tiff", dpi = 600, width = 8, height = 5)
ggsave(gpline.IndexByTime, filename = "C:/Users/ylc/Desktop/分时段故障预测指标.tiff", dpi = 600, width = 8, height = 6)
library(ggplot2)
library(dplyr)
windowsFonts(RMN = windowsFont("Times New Roman"))
mycolors <- c("#F8766D", "#00BA38", "#619CFF")
data.Index.byTime <- read.csv("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/resultBytimeCIPCAFN.csv")
data.Index.byTime$Neurons <- rep(c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
each = 30*3)
data.Index.byTime$Neurons <- factor(data.Index.byTime$Neurons,
levels = c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
ordered = TRUE)
data.Index.byTime$Index <- factor(data.Index.byTime$Index, levels = c("Accuracy", "Precision", "Recall"), ordered = TRUE)
data.Index.byTime$time <- factor(data.Index.byTime$time, levels = c(29:0), ordered = TRUE)
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
facet_wrap(.~Neurons, nrow = 4) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
data.Index.byTime <- read.csv("C:/Users/ylc/jgy/research/16-CIPCABPNN/test/resultBytimeCIPCAFN.csv")
data.Index.byTime$Neurons <- rep(c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
each = 30*3)
data.Index.byTime$Neurons <- factor(data.Index.byTime$Neurons,
levels = c("隐神经元数量:10",
"隐神经元数量:15",
"隐神经元数量:20",
"隐神经元数量:25",
"隐神经元数量:30",
"隐神经元数量:35",
"隐神经元数量:40",
"隐神经元数量:45"),
ordered = TRUE)
data.Index.byTime$Index <- factor(data.Index.byTime$Index, levels = c("Accuracy", "Precision", "Recall"), labels = c("准确率", "精确率", "召回率"), ordered = TRUE)
data.Index.byTime$time <- factor(data.Index.byTime$time, levels = c(29:0), ordered = TRUE)
data.Index.byTime <- data.Index.byTime[which(data.Index.byTime$Neurons=="隐神经元数量:30"), ]
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
scale_y_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c("70%", "80%", "90%")) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
gpline.IndexByTime <- ggplot(data = data.Index.byTime, aes(x = time, y = value, group = Index, color = Index)) +
geom_line(size = 2) +
geom_point(size = 5) +
scale_y_continuous(breaks = c(0.7, 0.8, 0.9, 1),
labels = c("70%", "80%", "90%", "100%")) +
scale_x_discrete(breaks = seq(from=1, to=29,by=2)) +
scale_color_manual(name = "Index:", values = mycolors) +
labs(x = "风险发生前时刻（秒）", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
gpline.IndexByTime
ggsave(gpline.IndexByTime, filename = "C:/Users/ylc/Desktop/分时段故障预测指标.tiff", dpi = 600, width = 8, height = 6)
