#         axis.title.y = element_text(family = "RMN", size = 28),
#         axis.text.y = element_text(family = "RMN", size = 28),
#         strip.text = element_text(family = "RMN", size = 28),
#         legend.title = element_text(family = "RMN", size = 28),
#         legend.text = element_text(family = "RMN", size = 28),
#         legend.position = "bottom")
# bar_goal_control
# # ggsave(bar_goal_control, filename = "C:/Users/ylc/Desktop/故障处理方式对比.tiff", dpi = 600, height = 10, width = 16)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型", values = c("#F8766D", "#00BA38", "#619CFF")) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型:", values = c("#F8766D", "#00BA38", "#619CFF")) +
scale_y_continuous(breaks = c(0.5, 0.6, 0.7, 0.8, 0.9, 1),
labels = c("50%", "60%", "70%", "80%", "90%", "100%"),
limits = c(0, 1)) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型:", values = c("#F8766D", "#00BA38", "#619CFF")) +
scale_y_continuous(breaks = c(0.5, 0.6, 0.7, 0.8, 0.9, 1),
labels = c("50%", "60%", "70%", "80%", "90%", "100%"),
limits = c(0.5, 1)) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型:", values = c("#F8766D", "#00BA38", "#619CFF")) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, "25%", "50%", "75%", "100%"),
limits = c(0, 1)) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型:", values = c("#F8766D", "#00BA38", "#619CFF")) +
scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8),
labels = c("0", "20%", "40%", "60%", "80%"),
limits = c(0, 0.85)) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
data_goal <- data_result_handle_svm %>% filter(type == "goal")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(dplyr)
library(ggplot2)
windowsFonts(RMN = windowsFont("Times New Roman"))
data_result_handle_svm <- read.csv("result_test2_handle_svm.csv")
data_result_handle_svm <- as_tibble(data_result_handle_svm)
data_result_handle_svm$index <- factor(data_result_handle_svm$index,
levels = c("Accuracy", "Precision", "Recall", "F1-Score"),
labels = c("准确率", "精确率", "召回率", "F1分数"),
ordered = TRUE)
data_result_handle_svm$type <- factor(data_result_handle_svm$type,
levels = c("control1", "control2", "goal"),
labels = c("模型1", "模型2", "模型3"), ordered = TRUE)
data_result_handle_svm$vectorsize <- factor(data_result_handle_svm$vectorsize,
levels = c(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000),
labels = c(paste("文本向量长度：", seq(100, 1000, 100), sep = "")),
ordered = TRUE)
names(data_result_handle_svm)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型:", values = c("#F8766D", "#00BA38", "#619CFF")) +
scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8),
labels = c("0", "20%", "40%", "60%", "80%"),
limits = c(0, 0.85)) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
# ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "goal")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
# ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
#
# # 做goal组和control组的对比图(向量长度200)
# data_goal_control <- data_result_handle_svm %>% filter(vectorsize == 200)
# bar_goal_control <- ggplot(data = data_goal_control, aes(x = index, y = result, fill = type)) +
#   geom_bar(stat = "identity", position = "dodge", width = 0.4) +
#   scale_fill_discrete(name = "模型:", breaks = c("goal", "control"), labels = c("融合定位信息", "未融合定位信息")) +
#   labs(y = "指标值", x = "模型评价指标") +
#   theme(axis.title.x = element_blank(),
#         axis.text.x = element_text(family = "RMN", size = 28),
#         axis.title.y = element_text(family = "RMN", size = 28),
#         axis.text.y = element_text(family = "RMN", size = 28),
#         strip.text = element_text(family = "RMN", size = 28),
#         legend.title = element_text(family = "RMN", size = 28),
#         legend.text = element_text(family = "RMN", size = 28),
#         legend.position = "bottom")
# bar_goal_control
# # ggsave(bar_goal_control, filename = "C:/Users/ylc/Desktop/故障处理方式对比.tiff", dpi = 600, height = 10, width = 16)
data_goal <- data_result_handle_svm %>% filter(type == "goal")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "goal")
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "Accuracy"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Precision"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "Recall"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1-Score"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
View(data_goal)
data_result_handle_svm <- read.csv("result_test2_handle_svm(两次建模的词向量一样).csv")
data_result_handle_svm <- as_tibble(data_result_handle_svm)
data_result_handle_svm$index <- factor(data_result_handle_svm$index,
levels = c("Accuracy", "Precision", "Recall", "F1-Score"),
labels = c("准确率", "精确率", "召回率", "F1分数"),
ordered = TRUE)
data_result_handle_svm$type <- factor(data_result_handle_svm$type,
levels = c("control1", "control2", "goal"),
labels = c("模型1", "模型2", "模型3"), ordered = TRUE)
data_result_handle_svm$vectorsize <- factor(data_result_handle_svm$vectorsize,
levels = c(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000),
labels = c(paste("文本向量长度：", seq(100, 1000, 100), sep = "")),
ordered = TRUE)
names(data_result_handle_svm)
# 做三个模型的对比图
bar_3modelvs <- ggplot(data = data_result_handle_svm,
aes(x = index, y = result, fill = type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
facet_wrap(.~vectorsize, ncol = 2) +
scale_fill_manual(name = "模型:", values = c("#F8766D", "#00BA38", "#619CFF")) +
scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8),
labels = c("0", "20%", "40%", "60%", "80%"),
limits = c(0, 0.85)) +
labs(y = "指标值") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(family = "RMN", size = 28),
axis.title.y = element_text(family = "RMN", size = 28),
axis.text.y = element_text(family = "RMN", size = 28),
strip.text = element_text(family = "RMN", size = 28),
legend.title = element_text(family = "RMN", size = 28),
legend.text = element_text(family = "RMN", size = 28),
legend.position = "bottom")
bar_3modelvs
ggsave(bar_3modelvs, filename = "C:/Users/ylc/Desktop/故障处理方式三个模型对比.tiff", dpi = 600, height = 22, width = 16)
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
# scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
# 做svm和word2vec的图
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
View(bar_3modelvs)
View(data_goal)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result))
# scale_shape_discrete(name = "模型评价指标：") +
# labs(x = "文本向量长度", y = "指标值") +
# theme(axis.title.x = element_text(family = "RMN", size = 25),
#       axis.text.x = element_text(family = "RMN", size = 25),
#       axis.title.y = element_text(family = "RMN", size = 25),
#       axis.text.y = element_text(family = "RMN", size = 25),
#       strip.text = element_text(family = "RMN", size = 25),
#       legend.title = element_text(family = "RMN", size = 25),
#       legend.text = element_text(family = "RMN", size = 25),
#       legend.position = "bottom")
line_goal
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(dplyr)
library(ggplot2)
windowsFonts(RMN = windowsFont("Times New Roman"))
data_result_handle_svm <- read.csv("result_test2_handle_svm(两次建模的词向量一样).csv")
data_result_handle_svm <- as_tibble(data_result_handle_svm)
data_result_handle_svm$index <- factor(data_result_handle_svm$index,
levels = c("Accuracy", "Precision", "Recall", "F1-Score"),
labels = c("准确率", "精确率", "召回率", "F1分数"),
ordered = TRUE)
data_result_handle_svm$type <- factor(data_result_handle_svm$type,
levels = c("control1", "control2", "goal"),
labels = c("模型1", "模型2", "模型3"), ordered = TRUE)
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
data_goal_label <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = data_goal_label,
labels = data_goal_label) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
labels = paste(breaks*100, "%", sep = "")
breaks <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
labels = paste(breaks*100, "%", sep = "")
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
breaks <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
labels = paste(breaks*100, "%", sep = "")
labels[3] <- "78.0%"
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 2) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result)) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result)) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = breaks,
labels = labels) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
data_goal <- data_result_handle_svm %>% filter(type == "模型3")
data_goal_min <- min(data_goal$result)
data_goal_max <- max(data_goal$result)
breaks <- round(seq(data_goal_min, data_goal_max, (data_goal_max-data_goal_min)/5), 3)
labels = paste(breaks*100, "%", sep = "")
labels[3] <- "78.0%"
line_goal <- ggplot()+
geom_point(data = data_goal, aes(x = vectorsize, y = result, shape = index), size = 3) +
geom_line(data = data_goal %>% filter(index == "准确率"), aes(x = vectorsize, y = result), size = 1) +
geom_line(data = data_goal %>% filter(index == "精确率"), aes(x = vectorsize, y = result), size = 1) +
geom_line(data = data_goal %>% filter(index == "召回率"), aes(x = vectorsize, y = result), size = 1) +
geom_line(data = data_goal %>% filter(index == "F1分数"), aes(x = vectorsize, y = result), size = 1) +
scale_x_continuous(breaks = seq(100, 1000, 100)) +
scale_y_continuous(limits = c(data_goal_min, data_goal_max),
breaks = breaks,
labels = labels) +
scale_shape_discrete(name = "模型评价指标：") +
labs(x = "文本向量长度", y = "指标值") +
theme(axis.title.x = element_text(family = "RMN", size = 25),
axis.text.x = element_text(family = "RMN", size = 25),
axis.title.y = element_text(family = "RMN", size = 25),
axis.text.y = element_text(family = "RMN", size = 25),
strip.text = element_text(family = "RMN", size = 25),
legend.title = element_text(family = "RMN", size = 25),
legend.text = element_text(family = "RMN", size = 25),
legend.position = "bottom")
line_goal
ggsave(line_goal, filename = "C:/Users/ylc/Desktop/故障处理方式goal.tiff", dpi = 600, height = 10, width = 16)
