?rock
library(e1701)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 0.5
cost = 0.01
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma)
# 进行预测
pred <- predict(ann, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
install.packages("e1071")
library(e1071)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 0.5
cost = 0.01
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 20
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 20
cost = 10
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 20
cost = 100
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 20
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 20
cost = 0.5
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 100
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 100
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "linear" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 1000
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidf.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("word2vec.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidfwords.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
gamma = 100
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidfwordp.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidfwordm.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("lda.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("doc2vec.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 50
cost = 1
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidfwords.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 100
cost = 10
type = "C-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
setwd("C:/Users/ylc/GitHub/Research/research2-21-TextMiningFault")
library(e1071)
# 载入建模数据
data_setmodel <- read.csv("tfidfwords.csv")
data_setmodel$y <- factor(data_setmodel$y)
# 设置训练集与测试集
set.seed(1)
trainSample <- sample(x = c(1:nrow(data_setmodel)), size = trunc(nrow(data_setmodel)*(2/3)), replace = FALSE)
data_train <- data_setmodel[trainSample, ]
data_test <- data_setmodel[-trainSample, ]
# 建立神经网络模型
# 关键参数设置
gamma = 100
cost = 10
type = "nu-classification" # "C-classification"和"nu-classification"适用于y为factor
kernel = "radial" # "linear“; ”polynomial“; ”radial"; "sigmoid"
# 建模
svm <- svm(y~., data = data_train, type = type, kernel = kernel, cost = cost, gamma = gamma, scale = FALSE)
# 进行预测
pred <- predict(svm, data_test[, -1])
table(data_test$y, pred)
